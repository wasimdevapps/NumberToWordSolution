// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.235
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace NumberText.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("millions")]
    public partial class MillionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "millions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "millions", "In order to display numbers in a user-friendly fashion\r\nAs a .NET developer\r\nI wa" +
                    "nt to be given the actual number value in text form of an integer", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return one million")]
        public virtual void ReturnOneMillion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return one million", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have an integer value of 1000000");
#line 8
 testRunner.When("I get the text");
#line 9
 testRunner.Then("the result should be one million");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return seven million")]
        public virtual void ReturnSevenMillion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return seven million", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I have an integer value of 7000000");
#line 13
 testRunner.When("I get the text");
#line 14
 testRunner.Then("the result should be seven million");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return fourteen million")]
        public virtual void ReturnFourteenMillion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return fourteen million", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("I have an integer value of 14000000");
#line 18
 testRunner.When("I get the text");
#line 19
 testRunner.Then("the result should be fourteen million");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return seventy four million")]
        public virtual void ReturnSeventyFourMillion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return seventy four million", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I have an integer value of 74000000");
#line 23
 testRunner.When("I get the text");
#line 24
 testRunner.Then("the result should be seventy four million");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return seventy four million one")]
        public virtual void ReturnSeventyFourMillionOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return seventy four million one", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I have an integer value of 74000001");
#line 28
 testRunner.When("I get the text");
#line 29
 testRunner.Then("the result should be seventy four million one");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return seventy four million three hundred twenty seven")]
        public virtual void ReturnSeventyFourMillionThreeHundredTwentySeven()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return seventy four million three hundred twenty seven", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I have an integer value of 74000327");
#line 33
 testRunner.When("I get the text");
#line 34
 testRunner.Then("the result should be seventy four million three hundred twenty seven");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return one hundred seventy four million three hundred twenty seven")]
        public virtual void ReturnOneHundredSeventyFourMillionThreeHundredTwentySeven()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return one hundred seventy four million three hundred twenty seven", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("I have an integer value of 174000327");
#line 38
 testRunner.When("I get the text");
#line 39
 testRunner.Then("the result should be one hundred seventy four million three hundred twenty seven");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return seventy four million four thousand three hundred twenty seven")]
        public virtual void ReturnSeventyFourMillionFourThousandThreeHundredTwentySeven()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return seventy four million four thousand three hundred twenty seven", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I have an integer value of 74004327");
#line 43
 testRunner.When("I get the text");
#line 44
 testRunner.Then("the result should be seventy four million four thousand three hundred twenty seve" +
                    "n");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return seventy four million thirty four thousand three hundred twenty seven")]
        public virtual void ReturnSeventyFourMillionThirtyFourThousandThreeHundredTwentySeven()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return seventy four million thirty four thousand three hundred twenty seven", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I have an integer value of 74034327");
#line 48
 testRunner.When("I get the text");
#line 49
 testRunner.Then("the result should be seventy four million thirty four thousand three hundred twen" +
                    "ty seven");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return thirty two million five hundred thirty seven thousand seven hundred forty " +
            "one")]
        public virtual void ReturnThirtyTwoMillionFiveHundredThirtySevenThousandSevenHundredFortyOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return thirty two million five hundred thirty seven thousand seven hundred forty " +
                    "one", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
 testRunner.Given("I have an integer value of 32537741");
#line 53
 testRunner.When("I get the text");
#line 54
 testRunner.Then("the result should be thirty two million five hundred thirty seven thousand seven " +
                    "hundred forty one");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return seventy four million five hundred thirty seven thousand seven hundred fort" +
            "y one")]
        public virtual void ReturnSeventyFourMillionFiveHundredThirtySevenThousandSevenHundredFortyOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return seventy four million five hundred thirty seven thousand seven hundred fort" +
                    "y one", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("I have an integer value of 74537741");
#line 58
 testRunner.When("I get the text");
#line 59
 testRunner.Then("the result should be seventy four million five hundred thirty seven thousand seve" +
                    "n hundred forty one");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return seventy four million three hundred thirty seven thousand seven hundred for" +
            "ty one")]
        public virtual void ReturnSeventyFourMillionThreeHundredThirtySevenThousandSevenHundredFortyOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return seventy four million three hundred thirty seven thousand seven hundred for" +
                    "ty one", ((string[])(null)));
#line 61
this.ScenarioSetup(scenarioInfo);
#line 62
 testRunner.Given("I have an integer value of 74337741");
#line 63
 testRunner.When("I get the text");
#line 64
 testRunner.Then("the result should be seventy four million three hundred thirty seven thousand sev" +
                    "en hundred forty one");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return eight hundred seventy four million three hundred thirty seven thousand sev" +
            "en hundred forty one")]
        public virtual void ReturnEightHundredSeventyFourMillionThreeHundredThirtySevenThousandSevenHundredFortyOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return eight hundred seventy four million three hundred thirty seven thousand sev" +
                    "en hundred forty one", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.Given("I have an integer value of 874337741");
#line 68
 testRunner.When("I get the text");
#line 69
 testRunner.Then("the result should be eight hundred seventy four million three hundred thirty seve" +
                    "n thousand seven hundred forty one");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return nine hundred ninety nine million nine hundred ninety nine thousand nine hu" +
            "ndred ninety nine")]
        public virtual void ReturnNineHundredNinetyNineMillionNineHundredNinetyNineThousandNineHundredNinetyNine()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return nine hundred ninety nine million nine hundred ninety nine thousand nine hu" +
                    "ndred ninety nine", ((string[])(null)));
#line 71
this.ScenarioSetup(scenarioInfo);
#line 72
 testRunner.Given("I have an integer value of 999999999");
#line 73
 testRunner.When("I get the text");
#line 74
 testRunner.Then("the result should be nine hundred ninety nine million nine hundred ninety nine th" +
                    "ousand nine hundred ninety nine");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
