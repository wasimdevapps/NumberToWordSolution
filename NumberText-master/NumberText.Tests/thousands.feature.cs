// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.235
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace NumberText.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("thousands")]
    public partial class ThousandsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "thousands.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "thousands", "In order to display numbers in a user-friendly fashion\r\nAs a .NET developer\r\nI wa" +
                    "nt to be given the actual number value in text form of an integer", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return one thousand")]
        public virtual void ReturnOneThousand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return one thousand", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have an integer value of 1000");
#line 8
 testRunner.When("I get the text");
#line 9
 testRunner.Then("the result should be one thousand");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return one thousand seven hundred thirty four")]
        public virtual void ReturnOneThousandSevenHundredThirtyFour()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return one thousand seven hundred thirty four", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I have an integer value of 1734");
#line 13
 testRunner.When("I get the text");
#line 14
 testRunner.Then("the result should be one thousand seven hundred thirty four");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return nine thousand eight hundred seventeen")]
        public virtual void ReturnNineThousandEightHundredSeventeen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return nine thousand eight hundred seventeen", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("I have an integer value of 9817");
#line 18
 testRunner.When("I get the text");
#line 19
 testRunner.Then("the result should be nine thousand eight hundred seventeen");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return ten thousand four hundred thirty two")]
        public virtual void ReturnTenThousandFourHundredThirtyTwo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return ten thousand four hundred thirty two", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I have an integer value of 10432");
#line 23
 testRunner.When("I get the text");
#line 24
 testRunner.Then("the result should be ten thousand four hundred thirty two");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return thirty thousand four hundred thirty two")]
        public virtual void ReturnThirtyThousandFourHundredThirtyTwo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return thirty thousand four hundred thirty two", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I have an integer value of 30432");
#line 28
 testRunner.When("I get the text");
#line 29
 testRunner.Then("the result should be thirty thousand four hundred thirty two");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return thirty seven thousand six hundred seventy four")]
        public virtual void ReturnThirtySevenThousandSixHundredSeventyFour()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return thirty seven thousand six hundred seventy four", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I have an integer value of 37674");
#line 33
 testRunner.When("I get the text");
#line 34
 testRunner.Then("the result should be thirty seven thousand six hundred seventy four");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return seven hundred thirty seven thousand four hundred thirty six")]
        public virtual void ReturnSevenHundredThirtySevenThousandFourHundredThirtySix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return seven hundred thirty seven thousand four hundred thirty six", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("I have an integer value of 737436");
#line 38
 testRunner.When("I get the text");
#line 39
 testRunner.Then("the result should be seven hundred thirty seven thousand four hundred thirty six");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return nine hundred ninety nine thousand nine hundred ninety nine")]
        public virtual void ReturnNineHundredNinetyNineThousandNineHundredNinetyNine()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return nine hundred ninety nine thousand nine hundred ninety nine", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I have an integer value of 999999");
#line 43
 testRunner.When("I get the text");
#line 44
 testRunner.Then("the result should be nine hundred ninety nine thousand nine hundred ninety nine");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return three hundred thirty four thousand three hundred twenty seven")]
        public virtual void ReturnThreeHundredThirtyFourThousandThreeHundredTwentySeven()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return three hundred thirty four thousand three hundred twenty seven", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I have an integer value of 334327");
#line 48
 testRunner.When("I get the text");
#line 49
 testRunner.Then("the result should be three hundred thirty four thousand three hundred twenty seve" +
                    "n");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
